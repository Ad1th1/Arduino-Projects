Localization is finding what and where an object exists in an image

Object Detection is finding what and where multiple object exist in an image

For localization, we need at least 4 more points to define a bounding box
Two common ways:
  1. Upper left and bottom right corners
  2. 2 corner points, height and width of the image
  
Sliding window
  Disadvantages:
  -lots of computation
  - many bounding boxes for the same object
  
Regional based networks R-CNN
- very tricky to implement
- slow, complicated 2 step process

YOLO algorithm
- split into a 7 by 7 grid
- every cell is responsible for predicting a bounding box
- 4 papers on yolo

Target Predicted bounding box
  - Intersection over union approach = Intersection/Union = x => 0<x<1
  
 Origin is at top left
 -------
 -
 -
 -
 Intersection over union 
  - evaluation metric used to measure the accuracy of an object detector on a particular dataset. 
 
 Tensors are simply mathematical objects that can be used to describe physical properties, just like scalars and vectors. In fact tensors are merely a generalisation of scalars and vectors; a scalar is a zero rank tensor, and a vector is a first rank tensor.
  
Cleaning up bounding-boxes using non-max supression
  - finding the best out of all the bounding boxes by comparing all of their iou's
  
Non-max supression:
  
When object has multiple bounding boxes, find the box with best IOU;
  - then find IOU of that box with other boxes = IOU2
  - if IOU2 is greater than some threshold, remove that box from the picture
  - do the same for all other boxes
  

Mean Average Precision:
  1. Get all bounding-box predictions on the test-set
  2. Sort by descending confidence score
  3. Calculate precision and recall as you go through all bb's
  4. Plot precision-recall graph
  
  true-positive = bbox that shares an iou > 0.5 with a bounding box
  false-negative = didn't output a bbox for a target bbox
  true-negative = didn't output a bbox that wasn't there => not present in this case
  false-positive = incorrect bbox
  
  precision = (true +ve)/(true +ve + false +ve)
    ~ of all bbox predictions made, how many are actually correct
  
  recall = (true +ve)/(true +ve + false -ve)
    ~ correct bb/total no of bb
    ~ of all target bb's which one did we detect correctly
    
   battle between precision and recall
   Eg: 
   
  
  
 

